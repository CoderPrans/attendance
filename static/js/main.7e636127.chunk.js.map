{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","attendance","students","classes","present","handleClick","bind","assertThisInitialized","takeAttendance","_this2","length","newAttendance","split","map","student","indiStu","push","Array","parseInt","fill","setState","document","getElementById","style","display","presentStudents","console","log","index","indexOf","i","toString","updatedAttendance","slice","splice","_this3","react_default","a","createElement","id","type","value","onChange","e","target","rows","cols","onClick","studentAtten","className","concat","arr","sum","j","addArr","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e636127.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props); \n    this.state = {\n      attendance: [],\n      students: \"\",\n      classes: 0,\n      present: \"\" \n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.takeAttendance = this.takeAttendance.bind(this)\n  }\n  handleClick() {\n    if(this.state.students.length > 0){\n      let newAttendance = []\n      this.state.students.split(',').map((student) => {\n        let indiStu = []\n        indiStu.push(student)\n        indiStu.push(new Array(parseInt(this.state.classes)).fill(\".\"))\n        newAttendance.push(indiStu)\n      }) \n      this.setState({attendance: newAttendance})\n    } \n    document.getElementById(\"generator-form\").style.display = \"none\"\n    document.getElementById(\"take-attendance\").style.display = \"block\"\n  }\n  takeAttendance() {\n    let presentStudents = this.state.present.split(',')\n    console.log(presentStudents)\n    let index = this.state.attendance[0][1].indexOf(\".\")\n    for(let i = 0; i < this.state.attendance.length; i++){  \n      presentStudents.indexOf((i+1).toString())\n      if(presentStudents.indexOf((i+1).toString()) !== -1){\n        let updatedAttendance = this.state.attendance.slice(0)\n        updatedAttendance[i][1].splice(index, 1, \"1\")\n        this.setState({attendance: updatedAttendance})\n      } else {\n        let updatedAttendance = this.state.attendance.slice(0) \n        updatedAttendance[i][1].splice(index, 1, \"0\")\n        this.setState({attendance: updatedAttendance})\n      } \n    } \n    console.log(this.state.present, this.state.attendance)\n\n    this.setState({present: \"\"})\n  }\n  render(){\n    console.log(this.state.attendance)\n    return <div>\n      <div id=\"generator-form\">\n        <div>\n      <p>Classes: </p>\n      <input type=\"text\" value={this.state.classes} onChange={(e) => this.setState({classes: e.target.value})} /> \n    </div><div>\n      <p>Students: </p>\n      <textarea rows={7} cols={30} value={this.state.students} onChange={(e) => this.setState({students: e.target.value})}></textarea>\n      <br />\n      <button onClick={this.handleClick}>Generate</button>\n  </div>\n  </div> \n  <div style={{display: \"flex\"}}>\n      <div id=\"sheet\">{\n        this.state.attendance.length > 0\n          ? this.state.attendance.map((studentAtten, index) => {\n            return(<div className=\"grid\"><p>{index+1}.</p><p>{studentAtten[0]}</p><p>{studentAtten[1].map((i) => ` ${i} `)}</p><p>{addArr(studentAtten[1])}/{this.state.classes}</p></div>)\n            })\n          : \"\"\n      }</div>\n    <div id=\"take-attendance\" style={{display: \"none\"}}>\n    <textarea rows={5} cols={20} value={this.state.present} onChange={(e) => this.setState({present: e.target.value})}></textarea>\n    <button onClick={this.takeAttendance}>Take Attendance</button>\n    </div>\n</div>\n      </div> \n  }\n}\n\n\nfunction addArr(arr) {\n let index = arr.indexOf(\".\")\n  let sum = 0\n  for(let j = 0; j < index; j++){\n    sum += parseInt(arr[j]) \n  }\n  return sum\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}